<?xml version="1.0" encoding="UTF-8"?>

<x:description xmlns:x="http://www.jenitennison.com/xslt/xspec"
               xmlns:functx="http://www.functx.com"
			   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
			   xmlns:archimate="http://www.archimatetool.com/archimate"
			   xmlns:zenta="http://magwas.rulez.org/zenta"
			   xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
               stylesheet="../enrich.xslt">

      <x:expect label="unescape throws xception for bad markup"
   		test="'would test it with zentatools:unescape(bad &lt;/markup>) if we had exceptions in xslt'" />

      <x:expect label="documentationMarkup=verbatim property makes the documentation verbatim style"
   		test="zenta:assertEquals(
			'&#xA;&#xA;/foo&amp;bar List&lt;String&gt;[3]&#xA;new line&#xA;&#xA;new para&#xA;- list&#xA;- list2&#xA;',
	   		//element[@name='verbatimTest']/documentation/screen/text()
   		)" />

      <x:expect label="documentationMarkup=MediaWiki property converts the documentation from wiki markup to xhtml (to be further processed!)"
   		test="zenta:assertEquals(
			'/foo&amp;bar List&lt;String&gt;[3]&#xA;new line',
	   		//element[@name='Wikitest']/documentation/para[1]
   		)" />
      <x:expect label="documentationMarkup=MediaWiki property converts the documentation from wiki markup to xhtml (p converted to para, but others hsould be further processed!)"
   		test="zenta:assertEquals(
			'More asterisks give deeper&#xA;',
	   		//element[@name='Wikitest']/documentation/ul/li[2]/ul/li/text()
   		)" />
      <x:expect label="b tags can be used in comment"
   		test="zenta:assertEquals(
	   		'bold',
	   		//element[@name='mary']/documentation/b
   		)" />

      <x:expect label="i tags can be used in comment"
   		test="zenta:assertEquals(
	   		'italic',
	   		//element[@name='mary']/documentation/i
   		)" />
      <x:expect label="u tags can be used in comment"
   		test="zenta:assertEquals(
	   		'underline',
	   		//element[@name='mary']/documentation/u
   		)" />
      <x:expect label="del tags can be used in comment"
   		test="zenta:assertEquals(
	   		'deleted',
	   		//element[@name='mary']/documentation/del
   		)" />

      <x:expect label="a tags can be used in comment with class"
   		test="zenta:assertEquals(
	   		'aclass',
	   		//element[@name='mary']/documentation/a/@class
   		)" />

      <x:expect label="a tags can be used in comment with href"
   		test="zenta:assertEquals(
	   		'http://example.href/url',
	   		//element[@name='mary']/documentation/a/@href
   		)" />

      <x:expect label="itemizedlist tags can be used in comment"
   		test="zenta:assertEquals(
	   		'listitem',
	   		//element[@name='mary']/documentation/itemizedlist/*[1]/name()
   		)" />
      <x:expect label="listitem tags can be used in comment"
   		test="zenta:assertEquals(
	   		'itemized lists',
	   		//element[@name='mary']/documentation/itemizedlist/listitem[1]
   		)" />
      <x:expect label="variablelist tags can be used in comment"
   		test="zenta:assertEquals(
	   		'varlistentry',
	   		//element[@name='mary']/documentation/variablelist/*[1]/name()
   		)" />
      <x:expect label="varlistentry tags can be used in comment"
   		test="zenta:assertEquals(
	   		'term',
	   		//element[@name='mary']/documentation//varlistentry/*[1]/name()
   		)" />
      <x:expect label="term tags can be used in comment"
   		test="zenta:assertEquals(
	   		'variable lists',
	   		//element[@name='mary']/documentation//term
   		)" />
      <x:expect label="para tags can be used in comment"
   		test="zenta:assertEquals(
	   		'For title and descriptions.',
	   		//element[@name='mary']/documentation//para
   		)" />
      <x:expect label="br tags can be used in comment"
   		test="zenta:assertEquals(
	   		'but have to write out both the start and the end tag.',
	   		//element[@name='mary']/documentation//text()[preceding-sibling::br]
   		)" />

      <x:expect label="embedding is possible with the same tags"
   		test="zenta:assertEquals(
	   		'embedded lists',
	   		//element[@name='mary']/documentation/itemizedlist/listitem/itemizedlist/listitem
   		)" />
   		
      <x:expect label="zenta:andedlist(items) does not use and if there is one item"
   		test="zenta:assertEquals(
	   		'Alain',
	   		zenta:andedlist(zenta:neighbour(/,//element[@name='bob'],'pampers',1)/@name)
   		)" />

      <x:expect label="zenta:andedlist(items) returns empty string if there is no item"
   		test="zenta:assertEquals(
	   		'',
	   		zenta:andedlist(zenta:neighbour(/,//element[@name='bob'],'pampers',0)/@name)
   		)" />
   		
      <x:expect label="zenta:andedlist(items) gives the list of items separated with comma and and"
   		test="zenta:assertEquals(
	   		'Alain, Kelly and Maurice',
	   		zenta:andedlist(zenta:neighbour(/,//element[@name='Jim'],'raises',1)/@name)
   		)" />

      <x:expect label="zenta:neighbour(.,.,relation,direction, neighbourClass)gives the list of neighbours through the relation of that class"
   		test="zenta:assertEquals(
	   		'Kelly, Maurice',
	   		string-join(zenta:neighbour(/,//element[@name='Jim'],'raises',1,'child')/@name,', ')
   		)" />

      <x:expect label="zenta:itemizedlist(items) creates an itemized list from items"
   		test="zenta:assertEquals(
	   		'Joe, mary, bob',
	   		string-join(zenta:itemizedlist(//element[@name='Odette']/value/@name)/itemizedlist/listitem/@name,', ')
   		)" />
      <x:expect label="zenta:itemizedlist(nothing) returns (none)"
   		test="zenta:assertEquals(
	   		'(none)',
	   		zenta:itemizedlist(//element[@name='nothing']/value/@name)
   		)" />
      <x:expect label="zenta:itemizedlist_as_string(items) creates an itemized list from items"
   		test="zenta:assertEquals(
	   		'Joe, mary, bob',
	   		string-join(//element[@name='Odette']/documentation/itemizedlist/listitem,', ')
   		)" />
      <x:expect label="zenta:itemizedlist_as_string(nothing) returns (none)"
   		test="zenta:assertEquals(
	   		'(none)',
	   		zenta:itemizedlist_as_string(//element[@name='nothing']/value/@name)
   		)" />

      <x:expect label="zenta:neighbour(.,relation,direction) gives the list of neighbours through the relation"
   		test="zenta:assertEquals(
	   		'a class directly descending from Basic Object Raises: Odette, Kelly',
	   		zenta:normalizeAllSpaces(//element[@name='bob']/documentation)
   		)" />

      <x:expect label="elements with no documentation get the documentation of the parent"
   		test="zenta:assertEquals(
	   		'42',
	   		//element[@name='Alain']/documentation
   		)" />

      <x:expect label="xpath in xpath tags in documentation get executed"
   		test="zenta:assertEquals(
	   		'42',
	   		//element[@name='grandchild']/documentation
   		)" />

   <x:scenario label="changetype mode changes element types">
      <x:expect label="The root object remains zenta:BasicObject"
      	test="//element[@id='basicobject']/@xsi:type = 'zenta:BasicObject'"/>
      	
      <x:expect label="objects without ancestor remain the same type"
      	test="//element[@name='Metamodel diagram']/@xsi:type = 'zenta:ZentaDiagramModel'"/>
      	
      <x:expect label="A Basic Object will be 'Basic Object'"
      	test="//element[@name='knife']/@xsi:type = 'Basic Object'"/>
      	
      <x:expect label="The type of instance of derived class will be the name of the class"
      	test="//element[@name='Joe']/@xsi:type = 'man'"/>
      	
      <x:expect label="Template elements have a template attribute"
      	test="//element[@name='man']/@template = 'true'"/>
      	
      <x:expect label="Non-template elements have no template attribute"
      	test="//element[@name='Joe']/@template = 'false'"/>

      <x:expect label="Template connections have a template attribute"
      	test="//connection[@name='pampers']/@template = 'true'"/>
      	
      <x:expect label="Non-template connections have no template attribute"
      	test="//connection[@name='gives candy to']/@template = 'false'"/>
      	
   </x:scenario>

   <x:scenario label="enrich mode insert value for connections">
      <x:context mode="enrich" select="$testData"/>
      
      <x:expect label="objects get 'value' subelements for each of the connections of the ancestor"
      	test="count(//element[@name='Joe']/value) >=1 "
      />
      
      <x:expect label="value have a target attribute with the id of the target element"
      	test="zenta:value-by-names(/,'Joe','Odette')/@target=//element[@name='Odette']/@id"
      />
	
      <x:expect label="there is a value for forward relations"
      	test="zenta:value-by-names(/,'Joe','Odette')/@direction = 1"
      />

      <x:expect label="there is a value for backward relations"
      	test="zenta:value-by-names(/,'Odette','Joe')//@direction = 2"
      />

      <x:expect label="value have the target name in the 'name' attribute"
      	test="zenta:value-by-names(/,'Joe','Odette')/@name='Odette'"
      />

      <x:expect label="number of values corresponds to relations of the object (case 2)"
      	test="count(//element[@name='Odette']/value)=3"
      />

      <x:expect label="number of values corresponds to relations of the object"
      	test="count(//element[@name='Joe']/value)=3"
      />

      <x:expect label="there is an error if there are less than minOccurs instances of values of a relation type to an element"
      	test="//element[@name='mary']/error/@type='minOccursError'"
      />

      <x:expect label="template elements have no errors for minOccurs"
      	test="//element[@name='man'] and not(//element[@name='man']/error/@type='minOccursError')"
      />

      <x:expect label="the error message contains the id of the defining relation"
      	test="//element[@name='mary']/error/@id=//connection[@name='pampers']/@id"
      />
      
      <x:expect label="the error message contains the name of the defining relation"
      	test="//element[@name='mary']/error/@name='pampers'"
      />
      
      <x:expect label="the minOccurs error message works backward as well"
      	test="//element[@name='Alain']/error/@name='pampers'"
      />
      
      <x:expect label="the minOccurs error message contains the minOccurs value backwards"
      	test="//element[@name='Alain']/error/@minOccurs=5"
      />
      <x:expect label="the minOccurs error message contains the minOccurs value forwards"
      	test="//element[@name='mary']/error/@minOccurs=3"
      />
   </x:scenario>

   <x:scenario label="relationships are broken to two unidirectional connections">
   	<x:context mode="enrich" select="$testData"/>

   	<x:expect label="there are connections with source attribute for relation sources"
   		test="//connection/@source=//element['Joe']/@id"/>

   	<x:expect label="the target attribute contains the target element for forward connections"
   		test="//connection[@source=//element['Joe']/@id]/@target=//element[@name='Odette']/@id" />
   		
   	<x:expect label="the direction attribute is 1 for forward connections"
   		test="zenta:connection-by-names(/,'Joe','Odette')/@direction=1" />

   	<x:expect label="the direction attribute is 2 for backward connections"
   		test="zenta:connection-by-names(/,'Odette','Joe')/@direction=2" />

   	<x:expect label="there is a minOccurs attribute for connections"
   		test="zenta:connection-by-names(/,'bob','Alain')/@minOccurs=3" />

   	<x:expect label="there are connections for backward direction. the direction attribute is 2 there"
   		test="zenta:connection-by-names(/,'Odette','Joe')/@direction=2"/>

   	<x:expect label="there is a minOccurs attribute for backward connections"
   		test="exists(zenta:connection-by-names(/,'Odette','Joe')/@minOccurs)" />

   	<x:expect label="minOccurs is the part after '/' of the minOccurs property if that exists for backward relations"
   		test="zenta:connection-by-names(/,'Alain','bob')/@minOccurs='5'" />
   		
   	<x:expect label="connections have the ancestor attribute for the defining relation for backward relations"
   		test="zenta:connection-by-names(/,'Odette','Joe')/@ancestor=
   			//connection[@name='raises']/@id" />

   	<x:expect label="connections have the id attribute for the defining relation"
   		test="zenta:connection-by-names(/,'Odette','Joe')/@id='2411fe2d'" />

   	<x:expect label="connections have the documentation of the relation"
   		test="zenta:connection-by-names(/,'Odette','Joe')/documentation=
   		   'This is an instance of a raises.'" />

   	<x:expect label="connections have the ancestor name as ancestorName attribute"
   		test="zenta:connection-by-names(/,'Odette','Joe')/@ancestorName='raises'" />

   	<x:expect label="connections have the relation name as relationName attribute"
   		test="zenta:connection-by-names(/,'child','man')/@relationName='raises'" />

   </x:scenario>

   <x:scenario label="enrich mode insert value for connections for indirect relations">
      <x:context mode="enrich" select="$virtRelationTestData"/>
      
      <x:expect label="connections are created for defining relationships"
      	test="exists(zenta:connection-by-names(/,'first level class','man'))"
      />
      <x:expect label="ancestry contains ancestor"
      	test="zenta:getAncestry(//element[@name='Alain'],/)/@name = 'child'"
      />
      <x:expect label="ancestry contains ancestor of ancestor"
      	test="zenta:getAncestry(//element[@name='Alain'],/)/@name = 'man'"
      />
      <x:expect label="ancestry contains basic object"
      	test="zenta:getAncestry(//element[@name='Alain'],/)/@name = 'Basic Object'"
      />
      <x:expect label="defining relations contain ones for ancestors"
      	test="zenta:getDefiningRelations(//element[@name='Alain'],/)/@name = 'raises'"
      />
    </x:scenario>

	<x:scenario label="regression">
		<x:expect label="values are created from just defined connections of template elements"
			test="//element[@name='man']/value/@relationName='pampers'"/>
		<x:expect label="values are created from just defined connections of template elements only once"
			test="count(//element[@name='man']/value[@relationName='raises'])=1"/>
	</x:scenario>
	
	<x:scenario label="maxOccurs">
   	<x:expect label="there is a maxOccurs attribute for connections"
   		test="zenta:connection-by-names(/,'bob','Alain')/@maxOccurs=2" />

   	<x:expect label="there are connections for backward direction. the direction attribute is 2 there"
   		test="zenta:connection-by-names(/,'Odette','Joe')/@direction=2"/>

   	<x:expect label="there is a maxOccurs attribute for backward connections"
   		test="exists(zenta:connection-by-names(/,'Odette','Joe')/@maxOccurs)" />

   	<x:expect label="maxOccurs is the part after '/' of the maxOccurs property if that exists for backward relations"
   		test="zenta:connection-by-names(/,'Odette','bob')/@maxOccurs='1'" />



      <x:expect label="there is an error if there are more than maxOccurs instances of values of a relation type to an element"
      	test="//element[@name='Odette']/error/@type='maxOccursError'"
      />

      <x:expect label="template elements have no errors for maxOccurs"
      	test="//element[@name='man'] and not(//element[@name='man']/error/@type[@type='maxOccursError']='maxOccursError')"
      />

      <x:expect label="the error message contains the id of the defining relation"
      	test="//element[@name='Odette']/error[@type='maxOccursError']/@id=//connection[@name='raises']/@id"
      />
      
      <x:expect label="the error message contains the name of the defining relation"
      	test="//element[@name='Odette']/error[@type='maxOccursError']/@name='raises'"
      />
      
      <x:expect label="the maxOccurs error message works backward as well"
      	test="//element[@name='Alain']/error[@type='maxOccursError']/@name='raises'"
      />
      
      <x:expect label="the maxOccurs error message contains the maxOccurs value backwards"
      	test="//element[@name='Alain']/error[@type='maxOccursError']/@maxOccurs=1"
      />
      <x:expect label="the maxOccurs error message contains the maxOccurs value forwards"
      	test="//element[@name='Jim']/error[@type='maxOccursError']/@maxOccurs=2"
      />

	  <x:expect label="descendantRelationsFor lists all relations of an element which are descendat of the relation"
	  	test="zenta:descendantRelationsFor(
	  			zenta:getDefiningRelations(//element[@name='bob'],/)[@relationName='raises'],
	  			//element[@name='bob'],
	  			/
	  			)/@name=
	  		'gives candy to'"/>
	  	
      <x:expect label="the maxOccurs message counts descendant relations as well"
      	test="//element[@name='bob']/error[@type='maxOccursError']/@maxOccurs=2"
      />
	</x:scenario>
	<x:scenario label="errors have a deterministic ID">
      <x:expect label="the id for maxOccurs is created from the id of the element and the id and direction of the relations"
      	test="zenta:assertEquals(
    	  		'maxOccurs_63fb6744_abe82119_1',
	      		//element[@name='bob']/error[@type='maxOccursError']/@errorID
    	  	)"
      />
      <x:expect label="the id for minOccurs is created from the id of the element and the id and direction of the relations"
      	test="zenta:assertEquals(
    	  		'minOccurs_63fb6744_87d6b2d5_1',
	      		//element[@name='bob']/error[@type='minOccursError']/@errorID
    	  	)"
      />
      

	</x:scenario>
   	<x:expect label="maxOccurs is one for relations without maxOccurs property"
   		test="zenta:connection-by-names(/,'Joe','target1')/@maxOccurs='1'" />
   	<x:expect label="maxOccurs is one for relations without maxOccurs property also for backwards relations"
   		test="zenta:connection-by-names(/,'Joe','target1')/@maxOccurs='1'" />
   	<x:expect label="minOccurs is one for relations without minOccurs property"
   		test="zenta:assertEquals(
	   		1,
	   		zenta:connection-by-names(/,'Maurice','ent ity')/@minOccurs
   		)" />
   	<x:expect label="minOccurs is one for relations without minOccurs property also for backwards relations"
   		test="zenta:connection-by-names(/,'ent ity','Maurice')/@minOccurs='1'" />
      <x:expect label="maxOccurs=-1 is treated as infinity"
      	test="count(//element[@name='mary']/error[@type='maxOccursError' and @name='pampers'])=0"/>
      <x:expect label="minOccurs=-1 is treated as infinity"
      	test="count(//element[@name='Kelly']/error[@type='minOccursError' and @name='raises'])=0"/>
      	

</x:description>
