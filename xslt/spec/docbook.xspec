<?xml version="1.0" encoding="UTF-8"?>

<x:description xmlns:x="http://www.jenitennison.com/xslt/xspec"
               xmlns:functx="http://www.functx.com"
			   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
			   xmlns:archimate="http://www.archimatetool.com/archimate"
			   xmlns:zenta="http://magwas.rulez.org/zenta"
			   xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
               stylesheet="../docbook.xslt">

	<x:scenario label="backward relation names">
	    <x:expect label="passive is okay for consonant and s"
	    	test="zenta:assertEquals(
	    		'is affected by',
	    		zenta:passive('affects')
	        	)"/>
	    <x:expect label="expression founds the character before last"
	    	test="zenta:assertEquals(
	    		'e',
	    		substring('raises',string-length('raises')-1,1)
	        	)"/>
	    <x:expect label="passive is okay for vovel and s"
	    	test="zenta:assertEquals(
	    		'is raised by',
	    		zenta:passive('raises')
	        	)"/>
		<x:expect label="if no backward relation name is defined, 'is Xed by' used"
	     	test="zenta:assertEquals(
	     		'Odette is raised by bob',
	     		//varlistentry[term/text()='Odette']/listitem/para/itemizedlist/listitem
	     		)
	     		"/>
		<x:expect label="if the character before the last is not vovel, then an e is inserted"
	     	test="zenta:assertEquals(
	     		'grandchild is pampered by at least 5 man',
	     		//varlistentry[term/text()='grandchild']/listitem/para/itemizedlist/listitem
	     		)
	     		"/>

		<x:expect label="if the character before the last is not vovel, then an e is inserted"
	     	test="zenta:assertEquals(
	     		'grandchild is pampered by at least 5 man',
	     		//varlistentry[term/text()='grandchild']/listitem/para/itemizedlist/listitem
	     		)
	     		"/>

		<x:expect label="if there is a '/' in relation name, then the part before it is used for forward relation"
	     	test="zenta:assertEquals(
	     		'child plays with ent',
	     		//varlistentry[term/text()='child']/listitem/para/itemizedlist/listitem
	     		)
	     		"/>

		<x:expect label="if there is a '/' in relation name, then the part after it is used for backward relation"
	     	test="zenta:assertEquals(
	     		'ent is played with by child',
	     		//varlistentry[term/text()='ent']/listitem/para/itemizedlist/listitem
	     		)
	     		"/>

	</x:scenario>

   <x:scenario label="listmode is varlist">
      <x:context select="$testData" mode="varlist"/>
      
      <x:expect label="The root tag is article"
      	test="count(/article) = 1 "/>

      <x:expect label="article version is 5.0"
      	test="/article/@version='5.0'"/>

      <x:expect label="folders become sections"
      	test="//*[title='Metamodel']/local-name()='section'"/>

      <x:expect label="sections have titles"
      	test="count(//section) = count(//section/title)"/>

      <x:expect label="section title is the name of the folder"
      	test="//section[title='Metamodel']/title='Metamodel'"/>

      <x:expect label="the first para of the section is the documentation for the folder"
      	test="//section[title='Metamodel']/para[1]='Metamodel documentation'"/>

      <x:expect label="the second para of the section contains a variablelist if it contains anything documentable"
      	test="count(//section[title='Metamodel']/para[2]/variablelist)=1"/>

      <x:expect label="the second para of the section does not contain a variablelist if there is nothing documentable"
      	test="count(//section[@id='emptyFolderId']/para[2]/variablelist)=0"/>

      <x:expect label="if there are diagrams, the second para contain the diagrams"
      	test="//section[title='Metamodel']/para[2]//figure/title='Metamodel diagram'"/>

      <x:expect label="diagram remark is the diagram documentation"
        test="//figure[title='Metamodel diagram']/remark='Metamodel diagram documentation'"/>

      <x:expect label="document contains the picture of the diagram"
        test="//figure[title='Metamodel diagram']/mediaobject/imageobject/imagedata/@fileref='pics/154fb1e4.png'"/>

      <x:expect label="elements follow the diagrams with element name in the term"
        test="//section[title='Metamodel']/para[2]/variablelist/varlistentry/term/text()='man'"/>

      <x:expect label="element documentation is in the listitem"
        test="//section[title='Metamodel']/para/variablelist/varlistentry[term/text()='man']/listitem/para/text()=
        'a class directly descending from Basic Object'"/>

      <x:expect label="named connections are documented with name in the term"
      	test="//varlistentry/term/text()='pampers'"/>

      <x:expect label="unnamed connections are not documented"
      	test="count(//anchor[@id='020b8d35']) = 0"/>

      <x:expect label="named connections are documented only once"
      	test="count(//varlistentry/term/text()='pampers') = 1"/>

      <x:expect label="connection documentation is in listitem"
        test="//varlistentry[term/text()='pampers']/listitem/para/text() = 'this relation is a descendant of a descendant of basic relation'"/>

      <x:expect label="subfolders are documented"
      	test="exists(//section[title='Subfolder'])"/>

      <x:expect label="elements have ancestor in the documentation"
      	test="zenta:assertEquals(
      		'A man is a Basic Object.',
      		//varlistentry[term/text()='man']/listitem/para/text()
      		)"/>
      <x:expect label="non-template elements receive definite article"
      	test="zenta:assertEquals(
      		'Joe is a man.',
      		//varlistentry[term/text()='Joe']/listitem/para/text()
      		)"/>
      <x:expect label="elements starting with vowel receive 'an'"
      	test="zenta:assertEquals(
      		'An ent is a Basic Object.',
      		//varlistentry[term/text()='ent']/listitem/para/text()
      		)"/>
   </x:scenario>

   <x:scenario label="documentation of connections">
      <x:expect label="template element documentation contains information for connections"
      	test="zenta:assertContains(
      		'connections:',
      		//varlistentry[term/text()='man']/listitem/para/text()
      		)"/>
      <x:expect label="documentation of non-template element without connections does not contains information for connections"
      	test="zenta:assertNotContains(
      		'connections:',
      		//varlistentry[term/text()='cat']/listitem/para/text()
      		)"/>
     <x:expect label="connection para contains an itemizedlist for connections"
     	test="//varlistentry[term/text()='man']/listitem/para/itemizedlist"/>

     <x:expect label="listitems contain a description of the connection"
     	test="zenta:assertEquals(
     		'man pampers at least 3 grandchild',
     		//varlistentry[term/text()='man']/listitem/para/itemizedlist/listitem
     		)
     		"/>

     <x:expect label="a connection is described once"
     	test="count(
	     		//varlistentry[term/text()='man']/listitem/para/itemizedlist/listitem[text()=
	     		'man pampers at least 3 grandchild']
     		) = 1
     		"/>

     <x:expect label="if minOccurs != 0, then listitem denotes it"
     	test="zenta:assertEquals(
     		'man pampers at least 3 grandchild',
     		//varlistentry[term/text()='man']/listitem/para/itemizedlist/listitem
     		)
     		"/>

     <x:expect label="another check"
     	test="zenta:assertEquals(
     		'man pampers at least 3 grandchild',
     		//varlistentry[term/text()='man']/listitem/para/itemizedlist/listitem
     		)
     		"/>

   </x:scenario>

   <x:scenario label="docbook contains the errors in the model">
      <x:context select="$testData"/>

      <x:expect label="There is a section titled 'Deviations'"
      	test="//section/title/text()='Deviations'"/>

      <x:expect label="deviation contains a subsection for model errors"
      	test="//section[title/text()='Deviations']/section/title/text()='Model Errors'"/>

      <x:expect label="model errors is a variablelist"
      	test="//section[title/text()='Deviations']/section/title/text()='Model Errors'"/>

      <x:expect label="model errors are only once in the document"
      	test="count(//section[title/text()='Deviations']/section[title/text()='Model Errors']/variablelist)=1"/>

   </x:scenario>

	<x:scenario label="maxOccurs documentation">
		<x:expect label="if maxOccurs != 0, then listitem denotes it"
	     	test="zenta:assertEquals(
	     		'man points to at most 1 target',
	     		//varlistentry[term/text()='man']/listitem/para/itemizedlist/listitem
	     		)
	     		"/>
	     		
		<x:expect label="minoccurs and maxoccurs together"
	     	test="zenta:assertEquals(
	     		'child is raised by at least 1 and at most 1 man',
	     		//varlistentry[term/text()='child']/listitem/para/itemizedlist/listitem
	     		)
	     		"/>
	</x:scenario>
	
	<x:scenario label="non-template connection documentation">

		<x:expect label="non-template elements have no atleast and atmost"
	     	test="zenta:assertEquals(
	     		'bob gives candy to Alain',
	     		//varlistentry[term/text()='bob']/listitem/para/itemizedlist/listitem
	     		)
	     		"/>
		<x:expect label="if relation name is empty, then name of parent relation is used"
	     	test="zenta:assertEquals(
	     		'bob raises Odette',
	     		//varlistentry[term/text()='bob']/listitem/para/itemizedlist/listitem
	     		)
	     		"/>
	</x:scenario>

	<x:scenario label="documentation generator generate anchor for errors">

      <x:expect label="there is an anchor in the term of the error with the errorID"
      	test="zenta:assertEquals(
      		'minOccurs_63fb6744_87d6b2d5',
      		//section[title/text()='Model Errors']//varlistentry/term/anchor/@id
      	)"/>
	</x:scenario>

	<x:scenario label="generated inconsistencies are included in the model">

      <x:expect label="there is a section under deviations for each of the checks"
      	test="zenta:assertSequenceEquals(
      		document('../../testmodel.check')//check/@title,
      		//section[title/text()='Deviations']/section/title/text()
      	)"/>
      <x:expect label="the section contains a varlist of onlyinput entries, anchored with errorID"
      	test="zenta:assertEquals(
      		document('../../testmodel.consistencycheck')//data[check/@title='Discrepancies with an external source']/onlyinput/entry/@errorID,
      		//section[title/text()='Discrepancies with an external source']//varlistentry/term/anchor/@id
      	)"/>
      <x:expect label="the section contains a varlist of onlymodel entries, anchored with errorID"
      	test="zenta:assertEquals(
      		document('../../testmodel.consistencycheck')//data[check/@title='Discrepancies with an external source']/onlymodel/entry/@errorID,
      		//section[title/text()='Discrepancies with an external source']//varlistentry/term/anchor/@id
      	)"/>
      <x:expect label="the title is generated according to errortitlestring"
      	test="zenta:assertEquals(
      		'no trace in model of alice raising Odette',
      		//section[title/text()='Discrepancies with an external source']//varlistentry/term/anchor/text()
      	)"/>
      <x:expect label="the full object is available for errortitlestring as $p1"
      	test="zenta:assertEquals(
      		'model says that bob (63fb6744) raises Odette (daad56f0), but no sign of it IRL',
      		//section[title/text()='Discrepancies with an external source']//varlistentry/term/anchor/text()
      	)"/>
      <x:expect label="the full document is available for errortitlestring as $p2"
      	test="zenta:assertEquals(
      		'missing relation for Odette',
      		//anchor[@id='maxOccurs_2d941c95_abe82119']/text()
      	)"/>
      <x:expect label="minOccurs errors have a meaningful title"
      	test="zenta:assertEquals(
      		'extra relation for bob',
      		//anchor[@id='minOccurs_63fb6744_87d6b2d5']/text()
      	)"/>
	</x:scenario>
      <x:expect label="the description is generated according to errordescription"
      	test="zenta:assertEquals(
      		'model says that bob (63fb6744) raises Odette (daad56f0), but no sign of it IRL',
      		//section[title/text()='Discrepancies with an external source']//varlistentry/listitem/text()
      	)"/>
	
	/>
</x:description>